{"version":3,"sources":["logo.svg","BarChart.js","ScatterPlot.js","LineGraph.js","App.js","serviceWorker.js","index.js","IceCreamTest.csv"],"names":["module","exports","BarChart","this","drawChart","svgWidth","props","data","width","svgHeight","height","margin","d3","IceCreamTest","then","console","log","xAxis","rangeRound","padding","yAxis","domain","map","d","Temperature","Revenue","svg","append","attr","call","selectAll","enter","style","bandwidth","Math","round","out_temperature","id","React","Component","ScatterPlot","range","LineGraph","x","y","valueline","App","state","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f1259cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass BarChart extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height;\n\n    //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 },\n      width = svgWidth - margin.left - margin.right,\n      height = svgHeight - margin.top - margin.bottom;\n\n\n    d3.csv(IceCreamTest).then((data) => {\n      console.log(data);\n\n      const xAxis = d3.scaleBand()\n        .rangeRound([0, width])\n        .padding(0.1)\n\n      const yAxis = d3.scaleLinear()\n        .rangeRound([height, 0]);\n\n        xAxis.domain(data.map(function(d) { return d.Temperature; }));\n        yAxis.domain([0, d3.max(data, function(d) { return d.Revenue; })]);\n\n      const svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", this.props.width)\n        .attr(\"height\", this.props.height)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\n      svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(xAxis))\n\n      svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(d3.axisLeft(yAxis))\n\n      svg.selectAll(\"bar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .style(\"fill\", \"steelblue\")\n        .attr(\"x\", function(d) { return xAxis(d.Temperature); })\n        .attr(\"width\", xAxis.bandwidth())\n        .attr(\"y\", function(d) { return yAxis(d.Revenue); })\n        .attr(\"height\", function(d) { return height - yAxis(d.Revenue); })\n        .attr(\"fill\", function(d) {\n          return \"rgb(0, 0, \" + Math.round((d.out_temperature * 155)+100) + \")\"; })\n    });\n  }\n\n  render(){\n    return <div id={\"#\" + this.props.id}></div>\n  }\n}\n\nexport default BarChart;\n","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass ScatterPlot extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height;\n\n    //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 },\n      width = svgWidth - margin.left - margin.right,\n      height = svgHeight - margin.top - margin.bottom;\n\n\n    d3.csv(IceCreamTest).then((data) => {\n      console.log(data);\n\n      const xAxis = d3.scaleBand()\n        .rangeRound([0, width])\n        .padding(0.1)\n\n      const yAxis = d3.scaleLinear()\n        .rangeRound([height, 0]);\n\n      xAxis.domain(data.map(function(d) { return d.Temperature; }));\n      yAxis.domain([0, d3.max(data, function(d) { return d.Revenue; })]);\n\n      var svg = d3.select(\"body\")\n        .append(\"svg\")\n        .attr(\"width\", this.props.width)\n        .attr(\"height\", this.props.height)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\n      // Add X axis\n      var x = d3.scaleLinear()\n        .domain([0, 4000])\n        .range([ 0, width ]);\n      svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(xAxis));\n\n      // Add Y axis\n      var y = d3.scaleLinear()\n        .domain([0, 500000])\n        .range([ height, 0]);\n      svg.append(\"g\")\n        .call(d3.axisLeft(yAxis));\n\n        xAxis.domain(data.map(function(d) { return d.Temperature; }));\n        yAxis.domain([0, d3.max(data, function(d) { return d.Revenue; })]);\n\n      // Add dots\n      svg.append('g')\n        .selectAll(\"dot\")\n        .data(data)\n        .enter()\n        .append(\"circle\")\n          .attr(\"cx\", function (d) { return xAxis(d.Temperature); } )\n          .attr(\"cy\", function (d) { return yAxis(d.Revenue); } )\n          .attr(\"r\", 5)\n          .style(\"fill\", \"steelblue\")\n    });\n  }\n\n  render(){\n    return <div id={\"#\" + this.props.id}></div>\n  }\n}\n\nexport default ScatterPlot;\n","import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass LineGraph extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height;\n\n    //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 },\n      width = svgWidth - margin.left - margin.right,\n      height = svgHeight - margin.top - margin.bottom;\n\n\n    d3.csv(IceCreamTest).then((data) => {\n      console.log(data);\n\n      const x = d3.scaleBand()\n        .rangeRound([0, width])\n        .padding(0.1)\n\n      const y = d3.scaleLinear()\n        .rangeRound([height, 0]);\n\n      var valueline = d3.line()\n        .x(function(d) { return x(d.Temperature); })\n        .y(function(d) { return y(d.Revenue); });\n\n      var svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\",\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      x.domain(data.map(function(d) { return d.Temperature; }));\n      y.domain([0, d3.max(data, function(d) { return d.Revenue; })]);\n\n      svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x))\n\n      svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(d3.axisLeft(y))\n\n      // Add the valueline path.\n      svg.append(\"path\")\n          .data([data])\n          .attr(\"class\", \"line\")\n          .attr(\"stroke-width\", 2)\n          .style(\"fill\", \"none\")\n          .style(\"stroke\", \"steelblue\")\n          .attr(\"d\", valueline);\n\n      // Add the X Axis\n      svg.append(\"g\")\n          .attr(\"class\", \"x axis\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x));\n\n      // Add the Y Axis\n      svg.append(\"g\")\n          .attr(\"class\", \"y axis\")\n          .call(d3.axisLeft(y));\n      });\n  }\n\n  render(){\n    return <div id={\"#\" + this.props.id}></div>\n  }\n}\n\nexport default LineGraph;\n","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport BarChart from './BarChart.js';\nimport ScatterPlot from './ScatterPlot.js';\nimport LineGraph from './LineGraph.js';\n\nclass App extends Component {\n\n  state = {\n    width: 700,\n    height: 500,\n    id: \"root\"\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <BarChart data={this.state.data} width={this.state.width} height={this.state.height} />\n        <ScatterPlot data={this.state.data} width={this.state.width} height={this.state.height} />\n        <LineGraph data={this.state.data} width={this.state.width} height={this.state.height} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/IceCreamTest.88c26726.csv\";"],"sourceRoot":""}