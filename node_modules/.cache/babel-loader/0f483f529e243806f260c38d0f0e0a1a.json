{"ast":null,"code":"var _jsxFileName = \"/Users/chia/mini/src/ScatterPlot.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass ScatterPlot extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height; //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 30,\n      left: 40\n    },\n          width = svgWidth - margin.left - margin.right,\n          height = svgHeight - margin.top - margin.bottom;\n    d3.csv(IceCreamTest).then(data => {\n      console.log(data);\n      const xAxis = d3.scaleBand().rangeRound([0, width]).padding(0.1);\n      const yAxis = d3.scaleLinear().rangeRound([height, 0]);\n      var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.props.width).attr(\"height\", this.props.height).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Add X axis\n      // var x = d3.scaleLinear()\n      //   .domain([0, 4000])\n      //   .range([ 0, width ]);\n\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(xAxis)); // Add Y axis\n      // var y = d3.scaleLinear()\n      // .domain([0, 500000])\n      // .range([ height, 0]);\n\n      svg.append(\"g\").call(d3.axisLeft(yAxis));\n      xAxis.domain(data.map(function (d) {\n        return d.Temperature;\n      }));\n      yAxis.domain([0, d3.max(data, function (d) {\n        return d.Revenue;\n      })]); // Add dots\n\n      svg.append('g').selectAll(\"dot\").data(data).enter().append(\"circle\").attr(\"cx\", function (d) {\n        return xAxis(d.Temperature);\n      }).attr(\"cy\", function (d) {\n        return yAxis(d.Revenue);\n      }).attr(\"r\", 5).style(\"fill\", \"steelblue\");\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"#\" + this.props.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default ScatterPlot;","map":{"version":3,"sources":["/Users/chia/mini/src/ScatterPlot.js"],"names":["React","Component","d3","IceCreamTest","ScatterPlot","componentDidMount","drawChart","data","props","svgWidth","width","svgHeight","height","margin","top","right","bottom","left","csv","then","console","log","xAxis","scaleBand","rangeRound","padding","yAxis","scaleLinear","svg","select","append","attr","call","axisBottom","axisLeft","domain","map","d","Temperature","max","Revenue","selectAll","enter","style","render","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass ScatterPlot extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height;\n\n    //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 },\n      width = svgWidth - margin.left - margin.right,\n      height = svgHeight - margin.top - margin.bottom;\n\n\n    d3.csv(IceCreamTest).then((data) => {\n      console.log(data);\n\n      const xAxis = d3.scaleBand()\n        .rangeRound([0, width])\n        .padding(0.1)\n\n      const yAxis = d3.scaleLinear()\n        .rangeRound([height, 0]);\n\n      var svg = d3.select(\"body\")\n        .append(\"svg\")\n        .attr(\"width\", this.props.width)\n        .attr(\"height\", this.props.height)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\n      // Add X axis\n      // var x = d3.scaleLinear()\n      //   .domain([0, 4000])\n      //   .range([ 0, width ]);\n      svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(xAxis));\n\n      // Add Y axis\n      // var y = d3.scaleLinear()\n        // .domain([0, 500000])\n        // .range([ height, 0]);\n      svg.append(\"g\")\n        .call(d3.axisLeft(yAxis));\n\n        xAxis.domain(data.map(function(d) { return d.Temperature; }));\n        yAxis.domain([0, d3.max(data, function(d) { return d.Revenue; })]);\n\n      // Add dots\n      svg.append('g')\n        .selectAll(\"dot\")\n        .data(data)\n        .enter()\n        .append(\"circle\")\n          .attr(\"cx\", function (d) { return xAxis(d.Temperature); } )\n          .attr(\"cy\", function (d) { return yAxis(d.Revenue); } )\n          .attr(\"r\", 5)\n          .style(\"fill\", \"steelblue\")\n    });\n  }\n\n  render(){\n    return <div id={\"#\" + this.props.id}></div>\n  }\n}\n\nexport default ScatterPlot;\n"]},"metadata":{},"sourceType":"module"}