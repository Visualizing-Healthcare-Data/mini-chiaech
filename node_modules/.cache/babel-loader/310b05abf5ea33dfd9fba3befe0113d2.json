{"ast":null,"code":"var _jsxFileName = \"/Users/chia/mini/src/LineGraph.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass LineGraph extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height; //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 30,\n      left: 40\n    },\n          width = svgWidth - margin.left - margin.right,\n          height = svgHeight - margin.top - margin.bottom;\n    d3.csv(IceCreamTest).then(data => {\n      console.log(data);\n      const xAxis = d3.scaleBand().rangeRound([0, width]).padding(0.1);\n      const yAxis = d3.scaleLinear().rangeRound([height, 0]);\n      var valueline = d3.line().xAxis(function (d) {\n        return xAxis(d.Temperature);\n      }).yAxis(function (d) {\n        return yAxis(d.Revenue);\n      });\n      var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      xAxis.domain(d3.extent(data, function (d) {\n        return d.Temperature;\n      }));\n      yAxis.domain([0, d3.max(data, function (d) {\n        return d.Revenue;\n      })]); // Add the valueline path.\n\n      svg.append(\"path\").data([data]).attr(\"class\", \"line\").attr(\"stroke-width\", 2).style(\"stroke\", \"steelblue\").attr(\"d\", valueline); // Add the X Axis\n\n      svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(xAxis)); // Add the Y Axis\n\n      svg.append(\"g\").attr(\"class\", \"y axis\").call(d3.axisLeft(yAxis));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"#\" + this.props.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default LineGraph;","map":{"version":3,"sources":["/Users/chia/mini/src/LineGraph.js"],"names":["React","Component","d3","IceCreamTest","LineGraph","componentDidMount","drawChart","data","props","svgWidth","width","svgHeight","height","margin","top","right","bottom","left","csv","then","console","log","xAxis","scaleBand","rangeRound","padding","yAxis","scaleLinear","valueline","line","d","Temperature","Revenue","svg","select","append","attr","domain","extent","max","style","call","axisBottom","axisLeft","render","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass LineGraph extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height;\n\n    //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 },\n      width = svgWidth - margin.left - margin.right,\n      height = svgHeight - margin.top - margin.bottom;\n\n\n    d3.csv(IceCreamTest).then((data) => {\n      console.log(data);\n\n      const xAxis = d3.scaleBand()\n        .rangeRound([0, width])\n        .padding(0.1)\n\n      const yAxis = d3.scaleLinear()\n        .rangeRound([height, 0]);\n\n      var valueline = d3.line()\n        .xAxis(function(d) { return xAxis(d.Temperature); })\n        .yAxis(function(d) { return yAxis(d.Revenue); });\n\n      var svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\",\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      xAxis.domain(d3.extent(data, function(d) { return d.Temperature; }));\n      yAxis.domain([0, d3.max(data, function(d) { return d.Revenue; })]);\n\n      // Add the valueline path.\n      svg.append(\"path\")\n          .data([data])\n          .attr(\"class\", \"line\")\n          .attr(\"stroke-width\", 2)\n          .style(\"stroke\", \"steelblue\")\n          .attr(\"d\", valueline);\n\n      // Add the X Axis\n      svg.append(\"g\")\n          .attr(\"class\", \"x axis\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(xAxis));\n\n      // Add the Y Axis\n      svg.append(\"g\")\n          .attr(\"class\", \"y axis\")\n          .call(d3.axisLeft(yAxis));\n      });\n  }\n\n  render(){\n    return <div id={\"#\" + this.props.id}></div>\n  }\n}\n\nexport default LineGraph;\n"]},"metadata":{},"sourceType":"module"}