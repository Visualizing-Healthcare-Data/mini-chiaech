{"ast":null,"code":"import _classCallCheck from\"/Users/chia/mini/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/chia/mini/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/chia/mini/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/chia/mini/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import*as d3 from'd3';import IceCreamTest from'./IceCreamTest.csv';var LineGraph=/*#__PURE__*/function(_React$Component){_inherits(LineGraph,_React$Component);var _super=_createSuper(LineGraph);function LineGraph(){_classCallCheck(this,LineGraph);return _super.apply(this,arguments);}_createClass(LineGraph,[{key:\"componentDidMount\",value:function componentDidMount(){this.drawChart();}},{key:\"drawChart\",value:function drawChart(){var data=this.props.data;var svgWidth=this.props.width;var svgHeight=this.props.height;//Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\nvar margin={top:20,right:20,bottom:30,left:40},width=svgWidth-margin.left-margin.right,height=svgHeight-margin.top-margin.bottom;d3.csv(IceCreamTest).then(function(data){console.log(data);var x=d3.scaleBand().rangeRound([0,width]).padding(0.1);var y=d3.scaleLinear().rangeRound([height,0]);var valueline=d3.line().x(function(d){return x(d.Temperature);}).y(function(d){return y(d.Revenue);});var svg=d3.select(\"body\").append(\"svg\").attr(\"width\",width+margin.left+margin.right).attr(\"height\",height+margin.top+margin.bottom).append(\"g\").attr(\"transform\",\"translate(\"+margin.left+\",\"+margin.top+\")\");x.domain(data.map(function(d){return d.Temperature;}));y.domain([0,d3.max(data,function(d){return d.Revenue;})]);svg.append(\"g\").attr(\"class\",\"x axis\").attr(\"transform\",\"translate(0,\"+height+\")\").call(d3.axisBottom(x));svg.append(\"g\").attr(\"class\",\"y axis\").call(d3.axisLeft(y));// Add the valueline path.\nsvg.append(\"path\").data([data]).attr(\"class\",\"line\").attr(\"stroke-width\",2).style(\"fill\",\"none\").style(\"stroke\",\"steelblue\").attr(\"d\",valueline);// Add the X Axis\nsvg.append(\"g\").attr(\"class\",\"x axis\").attr(\"transform\",\"translate(0,\"+height+\")\").call(d3.axisBottom(x));// Add the Y Axis\nsvg.append(\"g\").attr(\"class\",\"y axis\").call(d3.axisLeft(y));});}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{id:\"#\"+this.props.id});}}]);return LineGraph;}(React.Component);export default LineGraph;","map":{"version":3,"sources":["/Users/chia/mini/src/LineGraph.js"],"names":["React","Component","d3","IceCreamTest","LineGraph","drawChart","data","props","svgWidth","width","svgHeight","height","margin","top","right","bottom","left","csv","then","console","log","x","scaleBand","rangeRound","padding","y","scaleLinear","valueline","line","d","Temperature","Revenue","svg","select","append","attr","domain","map","max","call","axisBottom","axisLeft","style","id"],"mappings":"4gBAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,MAAO,GAAKC,CAAAA,EAAZ,KAAoB,IAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,oBAAzB,C,GAEMC,CAAAA,S,+RACgB,CAClB,KAAKC,SAAL,GACD,C,6CAEW,CACV,GAAMC,CAAAA,IAAI,CAAG,KAAKC,KAAL,CAAWD,IAAxB,CACA,GAAME,CAAAA,QAAQ,CAAG,KAAKD,KAAL,CAAWE,KAA5B,CACA,GAAMC,CAAAA,SAAS,CAAG,KAAKH,KAAL,CAAWI,MAA7B,CAEA;AACA,GAAMC,CAAAA,MAAM,CAAG,CAAEC,GAAG,CAAE,EAAP,CAAWC,KAAK,CAAE,EAAlB,CAAsBC,MAAM,CAAE,EAA9B,CAAkCC,IAAI,CAAE,EAAxC,CAAf,CACEP,KAAK,CAAGD,QAAQ,CAAGI,MAAM,CAACI,IAAlB,CAAyBJ,MAAM,CAACE,KAD1C,CAEEH,MAAM,CAAGD,SAAS,CAAGE,MAAM,CAACC,GAAnB,CAAyBD,MAAM,CAACG,MAF3C,CAKAb,EAAE,CAACe,GAAH,CAAOd,YAAP,EAAqBe,IAArB,CAA0B,SAACZ,IAAD,CAAU,CAClCa,OAAO,CAACC,GAAR,CAAYd,IAAZ,EAEA,GAAMe,CAAAA,CAAC,CAAGnB,EAAE,CAACoB,SAAH,GACPC,UADO,CACI,CAAC,CAAD,CAAId,KAAJ,CADJ,EAEPe,OAFO,CAEC,GAFD,CAAV,CAIA,GAAMC,CAAAA,CAAC,CAAGvB,EAAE,CAACwB,WAAH,GACPH,UADO,CACI,CAACZ,MAAD,CAAS,CAAT,CADJ,CAAV,CAGA,GAAIgB,CAAAA,SAAS,CAAGzB,EAAE,CAAC0B,IAAH,GACbP,CADa,CACX,SAASQ,CAAT,CAAY,CAAE,MAAOR,CAAAA,CAAC,CAACQ,CAAC,CAACC,WAAH,CAAR,CAA0B,CAD7B,EAEbL,CAFa,CAEX,SAASI,CAAT,CAAY,CAAE,MAAOJ,CAAAA,CAAC,CAACI,CAAC,CAACE,OAAH,CAAR,CAAsB,CAFzB,CAAhB,CAIA,GAAIC,CAAAA,GAAG,CAAG9B,EAAE,CAAC+B,MAAH,CAAU,MAAV,EAAkBC,MAAlB,CAAyB,KAAzB,EACPC,IADO,CACF,OADE,CACO1B,KAAK,CAAGG,MAAM,CAACI,IAAf,CAAsBJ,MAAM,CAACE,KADpC,EAEPqB,IAFO,CAEF,QAFE,CAEQxB,MAAM,CAAGC,MAAM,CAACC,GAAhB,CAAsBD,MAAM,CAACG,MAFrC,EAGTmB,MAHS,CAGF,GAHE,EAIPC,IAJO,CAIF,WAJE,CAKF,aAAevB,MAAM,CAACI,IAAtB,CAA6B,GAA7B,CAAmCJ,MAAM,CAACC,GAA1C,CAAgD,GAL9C,CAAV,CAOAQ,CAAC,CAACe,MAAF,CAAS9B,IAAI,CAAC+B,GAAL,CAAS,SAASR,CAAT,CAAY,CAAE,MAAOA,CAAAA,CAAC,CAACC,WAAT,CAAuB,CAA9C,CAAT,EACAL,CAAC,CAACW,MAAF,CAAS,CAAC,CAAD,CAAIlC,EAAE,CAACoC,GAAH,CAAOhC,IAAP,CAAa,SAASuB,CAAT,CAAY,CAAE,MAAOA,CAAAA,CAAC,CAACE,OAAT,CAAmB,CAA9C,CAAJ,CAAT,EAEAC,GAAG,CAACE,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ,OADR,CACiB,QADjB,EAEGA,IAFH,CAEQ,WAFR,CAEqB,eAAiBxB,MAAjB,CAA0B,GAF/C,EAGG4B,IAHH,CAGQrC,EAAE,CAACsC,UAAH,CAAcnB,CAAd,CAHR,EAKAW,GAAG,CAACE,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ,OADR,CACiB,QADjB,EAEGI,IAFH,CAEQrC,EAAE,CAACuC,QAAH,CAAYhB,CAAZ,CAFR,EAIA;AACAO,GAAG,CAACE,MAAJ,CAAW,MAAX,EACK5B,IADL,CACU,CAACA,IAAD,CADV,EAEK6B,IAFL,CAEU,OAFV,CAEmB,MAFnB,EAGKA,IAHL,CAGU,cAHV,CAG0B,CAH1B,EAIKO,KAJL,CAIW,MAJX,CAImB,MAJnB,EAKKA,KALL,CAKW,QALX,CAKqB,WALrB,EAMKP,IANL,CAMU,GANV,CAMeR,SANf,EAQA;AACAK,GAAG,CAACE,MAAJ,CAAW,GAAX,EACKC,IADL,CACU,OADV,CACmB,QADnB,EAEKA,IAFL,CAEU,WAFV,CAEuB,eAAiBxB,MAAjB,CAA0B,GAFjD,EAGK4B,IAHL,CAGUrC,EAAE,CAACsC,UAAH,CAAcnB,CAAd,CAHV,EAKA;AACAW,GAAG,CAACE,MAAJ,CAAW,GAAX,EACKC,IADL,CACU,OADV,CACmB,QADnB,EAEKI,IAFL,CAEUrC,EAAE,CAACuC,QAAH,CAAYhB,CAAZ,CAFV,EAGC,CApDH,EAqDD,C,uCAEO,CACN,mBAAO,2BAAK,EAAE,CAAE,IAAM,KAAKlB,KAAL,CAAWoC,EAA1B,EAAP,CACD,C,uBAzEqB3C,KAAK,CAACC,S,EA4E9B,cAAeG,CAAAA,SAAf","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass LineGraph extends React.Component {\n  componentDidMount() {\n    this.drawChart();  \n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height;\n\n    //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 },\n      width = svgWidth - margin.left - margin.right,\n      height = svgHeight - margin.top - margin.bottom;\n\n\n    d3.csv(IceCreamTest).then((data) => {\n      console.log(data);\n\n      const x = d3.scaleBand()\n        .rangeRound([0, width])\n        .padding(0.1)\n\n      const y = d3.scaleLinear()\n        .rangeRound([height, 0]);\n\n      var valueline = d3.line()\n        .x(function(d) { return x(d.Temperature); })\n        .y(function(d) { return y(d.Revenue); });\n\n      var svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\",\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      x.domain(data.map(function(d) { return d.Temperature; }));\n      y.domain([0, d3.max(data, function(d) { return d.Revenue; })]);\n\n      svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x))\n\n      svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(d3.axisLeft(y))\n\n      // Add the valueline path.\n      svg.append(\"path\")\n          .data([data])\n          .attr(\"class\", \"line\")\n          .attr(\"stroke-width\", 2)\n          .style(\"fill\", \"none\")\n          .style(\"stroke\", \"steelblue\")\n          .attr(\"d\", valueline);\n\n      // Add the X Axis\n      svg.append(\"g\")\n          .attr(\"class\", \"x axis\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x));\n\n      // Add the Y Axis\n      svg.append(\"g\")\n          .attr(\"class\", \"y axis\")\n          .call(d3.axisLeft(y));\n      });\n  }\n\n  render(){\n    return <div id={\"#\" + this.props.id}></div>\n  }\n}\n\nexport default LineGraph;\n"]},"metadata":{},"sourceType":"module"}