{"ast":null,"code":"var _jsxFileName = \"/Users/chia/mini/src/BarChart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass BarChart extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height; //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 30,\n      left: 40\n    },\n          width = svgWidth - margin.left - margin.right,\n          height = svgHeight - margin.top - margin.bottom;\n    d3.csv(IceCreamTest).then(data => {\n      console.log(data);\n      const xAxis = d3.scaleBand().rangeRound([0, width]).padding(0.1);\n      const yAxis = d3.scaleLinear().rangeRound([height, 0]);\n      xAxis.domain(data.map(function (d) {\n        return d.Temperature;\n      }));\n      yAxis.domain([0, d3.max(data, function (d) {\n        return d.Revenue;\n      })]);\n      const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.props.width).attr(\"height\", this.props.height).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(xAxis)).selectAll(\"text\").style(\"text-anchor\", \"middle\").text(\"Temperature\");\n      svg.append(\"g\").attr(\"class\", \"y axis\").call(d3.axisLeft(yAxis)).append(\"text\").attr(\"transform\", \"rotate(-90)\").style(\"text-anchor\", \"middle\").text(\"Revenue\");\n      svg.selectAll(\"bar\").data(data).enter().append(\"rect\").style(\"fill\", \"steelblue\").attr(\"x\", function (d) {\n        return xAxis(d.Temperature);\n      }).attr(\"width\", xAxis.bandwidth()).attr(\"y\", function (d) {\n        return yAxis(d.Revenue);\n      }).attr(\"height\", function (d) {\n        return height - yAxis(d.Revenue);\n      }).attr(\"fill\", function (d) {\n        return \"rgb(0, 0, \" + Math.round(d.out_temperature * 155 + 100) + \")\";\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"#\" + this.props.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/chia/mini/src/BarChart.js"],"names":["React","Component","d3","IceCreamTest","BarChart","componentDidMount","drawChart","data","props","svgWidth","width","svgHeight","height","margin","top","right","bottom","left","csv","then","console","log","xAxis","scaleBand","rangeRound","padding","yAxis","scaleLinear","domain","map","d","Temperature","max","Revenue","svg","select","append","attr","call","axisBottom","selectAll","style","text","axisLeft","enter","bandwidth","Math","round","out_temperature","render","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass BarChart extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height;\n\n    //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 },\n      width = svgWidth - margin.left - margin.right,\n      height = svgHeight - margin.top - margin.bottom;\n\n\n    d3.csv(IceCreamTest).then((data) => {\n      console.log(data);\n\n      const xAxis = d3.scaleBand()\n        .rangeRound([0, width])\n        .padding(0.1)\n\n      const yAxis = d3.scaleLinear()\n        .rangeRound([height, 0]);\n\n        xAxis.domain(data.map(function(d) { return d.Temperature; }));\n        yAxis.domain([0, d3.max(data, function(d) { return d.Revenue; })]);\n\n      const svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", this.props.width)\n        .attr(\"height\", this.props.height)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n\n      svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(xAxis))\n      .selectAll(\"text\")\n        .style(\"text-anchor\", \"middle\")\n        .text(\"Temperature\");\n\n      svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(d3.axisLeft(yAxis))\n      .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\" )\n        .style(\"text-anchor\", \"middle\")\n        .text(\"Revenue\");\n\n      svg.selectAll(\"bar\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .style(\"fill\", \"steelblue\")\n        .attr(\"x\", function(d) { return xAxis(d.Temperature); })\n        .attr(\"width\", xAxis.bandwidth())\n        .attr(\"y\", function(d) { return yAxis(d.Revenue); })\n        .attr(\"height\", function(d) { return height - yAxis(d.Revenue); })\n        .attr(\"fill\", function(d) {\n          return \"rgb(0, 0, \" + Math.round((d.out_temperature * 155)+100) + \")\"; })\n    });\n  }\n\n  render(){\n    return <div id={\"#\" + this.props.id}></div>\n  }\n}\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}