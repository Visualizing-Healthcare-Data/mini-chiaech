{"ast":null,"code":"var _jsxFileName = \"/Users/chia/mini/src/LineGraph.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass LineGraph extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height; //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 30,\n      left: 40\n    },\n          width = svgWidth - margin.left - margin.right,\n          height = svgHeight - margin.top - margin.bottom;\n    d3.csv(IceCreamTest).then(data => {\n      console.log(data);\n      const x = d3.scaleBand().rangeRound([0, width]).padding(0.1);\n      const y = d3.scaleLinear().rangeRound([height, 0]);\n      var valueline = d3.line().x(function (d) {\n        return x(d.Temperature);\n      }).y(function (d) {\n        return y(d.Revenue);\n      });\n      var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      x.domain(data.map(data, function (d) {\n        return d.Temperature;\n      }));\n      y.domain([0, d3.max(data, function (d) {\n        return d.Revenue;\n      })]);\n      svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n      svg.append(\"g\").attr(\"class\", \"y axis\").call(d3.axisLeft(y)); // Add the valueline path.\n\n      svg.append(\"path\").data([data]).attr(\"class\", \"line\").attr(\"stroke-width\", 2).style(\"stroke\", \"steelblue\").attr(\"d\", valueline); // Add the X Axis\n\n      svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add the Y Axis\n\n      svg.append(\"g\").attr(\"class\", \"y axis\").call(d3.axisLeft(y));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"#\" + this.props.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default LineGraph;","map":{"version":3,"sources":["/Users/chia/mini/src/LineGraph.js"],"names":["React","Component","d3","IceCreamTest","LineGraph","componentDidMount","drawChart","data","props","svgWidth","width","svgHeight","height","margin","top","right","bottom","left","csv","then","console","log","x","scaleBand","rangeRound","padding","y","scaleLinear","valueline","line","d","Temperature","Revenue","svg","select","append","attr","domain","map","max","call","axisBottom","axisLeft","style","render","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as d3 from 'd3';\nimport IceCreamTest from './IceCreamTest.csv';\n\nclass LineGraph extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    const data = this.props.data;\n    const svgWidth = this.props.width;\n    const svgHeight = this.props.height;\n\n    //Note: getting width and height from a variable rather than the elements attribute e.g. svg.attr(\"width\")\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 },\n      width = svgWidth - margin.left - margin.right,\n      height = svgHeight - margin.top - margin.bottom;\n\n\n    d3.csv(IceCreamTest).then((data) => {\n      console.log(data);\n\n      const x = d3.scaleBand()\n        .rangeRound([0, width])\n        .padding(0.1)\n\n      const y = d3.scaleLinear()\n        .rangeRound([height, 0]);\n\n      var valueline = d3.line()\n        .x(function(d) { return x(d.Temperature); })\n        .y(function(d) { return y(d.Revenue); });\n\n      var svg = d3.select(\"body\").append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n        .attr(\"transform\",\n              \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      x.domain(data.map(data, function(d) { return d.Temperature; }));\n      y.domain([0, d3.max(data, function(d) { return d.Revenue; })]);\n\n      svg.append(\"g\")\n        .attr(\"class\", \"x axis\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x))\n\n      svg.append(\"g\")\n        .attr(\"class\", \"y axis\")\n        .call(d3.axisLeft(y))\n\n      // Add the valueline path.\n      svg.append(\"path\")\n          .data([data])\n          .attr(\"class\", \"line\")\n          .attr(\"stroke-width\", 2)\n          .style(\"stroke\", \"steelblue\")\n          .attr(\"d\", valueline);\n\n      // Add the X Axis\n      svg.append(\"g\")\n          .attr(\"class\", \"x axis\")\n          .attr(\"transform\", \"translate(0,\" + height + \")\")\n          .call(d3.axisBottom(x));\n\n      // Add the Y Axis\n      svg.append(\"g\")\n          .attr(\"class\", \"y axis\")\n          .call(d3.axisLeft(y));\n      });\n  }\n\n  render(){\n    return <div id={\"#\" + this.props.id}></div>\n  }\n}\n\nexport default LineGraph;\n"]},"metadata":{},"sourceType":"module"}